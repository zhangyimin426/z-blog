<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd" >
<mapper namespace="com.zym.blog.dao.BlogDao">
    <resultMap id="BaseResultMap" type="com.zym.blog.model.Blog">
        <id column="blog_id" property="blogId" jdbcType="INTEGER"/>
        <result column="blog_title" property="blogTitle" jdbcType="VARCHAR"/>
        <result column="blog_type" property="blogType" jdbcType="INTEGER"/>
        <result column="blog_label" property="blogLabel" jdbcType="VARCHAR"/>
        <result column="author" property="author" jdbcType="VARCHAR"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
    </resultMap>
    <resultMap id="ResultMapWithBLOBs" type="com.zym.blog.model.Blog" extends="BaseResultMap">
        <result column="blog_content" property="blogContent" jdbcType="LONGVARCHAR"/>
    </resultMap>
    <sql id="Base_Column_List">
        blog_id, blog_title, blog_type, blog_label, author, create_time, update_time
    </sql>
    <sql id="Blob_Column_List">
        blog_content
    </sql>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>

    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>

    <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="com.zym.blog.model.example.BlogExample">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from t_blog
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>

    <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.zym.blog.model.example.BlogExample">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from t_blog
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>

    <select id="selectByExampleWithBLOBsAndPage" resultMap="ResultMapWithBLOBs"
            parameterType="com.zym.blog.model.example.BlogExample">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from t_blog
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>

    <select id="selectByExampleAndPage" resultMap="BaseResultMap" parameterType="com.zym.blog.model.example.BlogExample">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from t_blog
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>

    <delete id="deleteByExample" parameterType="com.zym.blog.model.example.BlogExample">
        delete from t_blog
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>

    <select id="countByExample" parameterType="com.zym.blog.model.example.BlogExample" resultType="java.lang.Integer">
        select count(*) from t_blog
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>

    <update id="updateByExampleSelective" parameterType="map">
        update t_blog
        <set>
            <if test="record.blogId != null">
                blog_id = #{record.blogId,jdbcType=INTEGER},
            </if>
            <if test="record.blogTitle != null">
                blog_title = #{record.blogTitle,jdbcType=VARCHAR},
            </if>
            <if test="record.blogType != null">
                blog_type = #{record.blogType,jdbcType=INTEGER},
            </if>
            <if test="record.blogLabel != null">
                blog_label = #{record.blogLabel,jdbcType=VARCHAR},
            </if>
            <if test="record.author != null">
                author = #{record.author,jdbcType=VARCHAR},
            </if>
            <if test="record.createTime != null">
                create_time = #{record.createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.updateTime != null">
                update_time = #{record.updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.blogContent != null">
                blog_content = #{record.blogContent,jdbcType=LONGVARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>

    <update id="updateByExampleWithBLOBs" parameterType="map">
        update t_blog
        set blog_id = #{record.blogId,jdbcType=INTEGER},
        blog_title = #{record.blogTitle,jdbcType=VARCHAR},
        blog_type = #{record.blogType,jdbcType=INTEGER},
        blog_label = #{record.blogLabel,jdbcType=VARCHAR},
        author = #{record.author,jdbcType=VARCHAR},
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
        blog_content = #{record.blogContent,jdbcType=LONGVARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>

    <update id="updateByExample" parameterType="map">
        update t_blog
        set blog_id = #{record.blogId,jdbcType=INTEGER},
        blog_title = #{record.blogTitle,jdbcType=VARCHAR},
        blog_type = #{record.blogType,jdbcType=INTEGER},
        blog_label = #{record.blogLabel,jdbcType=VARCHAR},
        author = #{record.author,jdbcType=VARCHAR},
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
        update_time = #{record.updateTime,jdbcType=TIMESTAMP}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>

    <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from t_blog
        where blog_id = #{blogId,jdbcType=INTEGER}
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete from t_blog
        where blog_id = #{blogId,jdbcType=INTEGER}
    </delete>

    <insert id="insert" parameterType="com.zym.blog.model.Blog" useGeneratedKeys="true" keyProperty="blogId">
        insert into t_blog
        <trim prefix="(" suffix=")" suffixOverrides=",">
            blog_title,
            blog_type,
            blog_label,
            author,
            create_time,
            update_time,
            blog_content,
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            #{blogTitle,jdbcType=VARCHAR},
            #{blogType,jdbcType=INTEGER},
            #{blogLabel,jdbcType=VARCHAR},
            #{author,jdbcType=VARCHAR},
            #{createTime,jdbcType=TIMESTAMP},
            #{updateTime,jdbcType=TIMESTAMP},
            #{blogContent,jdbcType=LONGVARCHAR},
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.zym.blog.model.Blog">
        update t_blog
        <set>
            <if test="blogTitle != null">
                blog_title = #{blogTitle,jdbcType=VARCHAR},
            </if>
            <if test="blogType != null">
                blog_type = #{blogType,jdbcType=INTEGER},
            </if>
            <if test="blogLabel != null">
                blog_label = #{blogLabel,jdbcType=VARCHAR},
            </if>
            <if test="author != null">
                author = #{author,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="blogContent != null">
                blog_content = #{blogContent,jdbcType=LONGVARCHAR},
            </if>
        </set>
        where blog_id = #{blogId,jdbcType=INTEGER}
    </update>

    <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.zym.blog.model.Blog">
        update t_blog
        set blog_title = #{blogTitle,jdbcType=VARCHAR},
        blog_type = #{blogType,jdbcType=INTEGER},
        blog_label = #{blogLabel,jdbcType=VARCHAR},
        author = #{author,jdbcType=VARCHAR},
        create_time = #{createTime,jdbcType=TIMESTAMP},
        update_time = #{updateTime,jdbcType=TIMESTAMP},
        blog_content = #{blogContent,jdbcType=LONGVARCHAR}
        where blog_id = #{blogId,jdbcType=INTEGER}
    </update>

    <update id="updateByPrimaryKey" parameterType="com.zym.blog.model.Blog">
        update t_blog
        set blog_title = #{blogTitle,jdbcType=VARCHAR},
        blog_type = #{blogType,jdbcType=INTEGER},
        blog_label = #{blogLabel,jdbcType=VARCHAR},
        author = #{author,jdbcType=VARCHAR},
        create_time = #{createTime,jdbcType=TIMESTAMP},
        update_time = #{updateTime,jdbcType=TIMESTAMP}
        where blog_id = #{blogId,jdbcType=INTEGER}
    </update>
</mapper>